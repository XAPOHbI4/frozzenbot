"""Seed database with test data."""

import asyncio
from sqlalchemy.ext.asyncio import AsyncSession

from app.database import AsyncSessionLocal
from app.models.category import Category
from app.models.product import Product


async def seed_database():
    """Seed database with test products."""
    async with AsyncSessionLocal() as db:
        # Create category
        category = Category(
            name="–ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞",
            description="–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞",
            is_active=True,
            sort_order=1
        )
        db.add(category)
        await db.flush()  # Get category ID

        # Test products data
        products_data = [
            {
                "name": "–ü–ª–æ–≤ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π",
                "description": "–ê—Ä–æ–º–∞—Ç–Ω—ã–π –ø–ª–æ–≤ —Å –Ω–µ–∂–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–ø–µ—Ü–∏—è–º–∏. –ì–æ—Ç–æ–≤ –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∑–∞ 5 –º–∏–Ω—É—Ç.",
                "price": 450.0,
                "weight": 400,
                "image_url": "https://example.com/images/plov.jpg"
            },
            {
                "name": "–ü–∞—Å—Ç–∞ –ë–æ–ª–æ–Ω—å–µ–∑–µ",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∞—Å—Ç–∞ —Å –º—è—Å–Ω—ã–º —Å–æ—É—Å–æ–º –±–æ–ª–æ–Ω—å–µ–∑–µ. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–∂–∏–Ω–∞.",
                "price": 380.0,
                "weight": 350,
                "image_url": "https://example.com/images/pasta.jpg"
            },
            {
                "name": "–õ–∞–∑–∞–Ω—å—è –º—è—Å–Ω–∞—è",
                "description": "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –ª–∞–∑–∞–Ω—å—è —Å –º—è—Å–Ω—ã–º —Ñ–∞—Ä—à–µ–º, —Å—ã—Ä–æ–º –∏ —Å–æ—É—Å–æ–º –±–µ—à–∞–º–µ–ª—å.",
                "price": 520.0,
                "weight": 450,
                "image_url": "https://example.com/images/lasagna.jpg"
            },
            {
                "name": "–ì—É–ª—è—à —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º",
                "description": "–°—ã—Ç–Ω—ã–π –≥—É–ª—è—à –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã —Å –º–æ–ª–æ–¥—ã–º –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ –æ–≤–æ—â–∞–º–∏.",
                "price": 420.0,
                "weight": 400,
                "image_url": "https://example.com/images/goulash.jpg"
            },
            {
                "name": "–ö—É—Ä–∏—Ü–∞ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ",
                "description": "–ù–µ–∂–Ω–∞—è –∫—É—Ä–∏—Ü–∞ –≤ –∞—Ä–æ–º–∞—Ç–Ω–æ–º —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ —Å —Ç—Ä–∞–≤–∞–º–∏.",
                "price": 390.0,
                "weight": 350,
                "image_url": "https://example.com/images/chicken.jpg"
            },
            {
                "name": "–†–∞–≥—É –æ–≤–æ—â–Ω–æ–µ —Å –º—è—Å–æ–º",
                "description": "–î–æ–º–∞—à–Ω–µ–µ —Ä–∞–≥—É —Å —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏ –∏ –∫—É—Å–æ—á–∫–∞–º–∏ –º—è—Å–∞.",
                "price": 360.0,
                "weight": 380,
                "image_url": "https://example.com/images/ragu.jpg"
            },
            {
                "name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤ —Å –≥—Ä–∏–±–∞–º–∏ –≤ —Å–º–µ—Ç–∞–Ω–Ω–æ–º —Å–æ—É—Å–µ.",
                "price": 480.0,
                "weight": 400,
                "image_url": "https://example.com/images/beef.jpg"
            },
            {
                "name": "–°–æ–ª—è–Ω–∫–∞ –º—è—Å–Ω–∞—è",
                "description": "–ì—É—Å—Ç–∞—è —Å–æ–ª—è–Ω–∫–∞ —Å –∫–æ–ø—á–µ–Ω–æ—Å—Ç—è–º–∏, –∫–æ–ª–±–∞—Å–æ–π –∏ —Å–æ–ª–µ–Ω—ã–º–∏ –æ–≥—É—Ä—Ü–∞–º–∏.",
                "price": 350.0,
                "weight": 400,
                "image_url": "https://example.com/images/solyanka.jpg"
            }
        ]

        # Create products
        for i, product_data in enumerate(products_data, 1):
            product = Product(
                category_id=category.id,
                sort_order=i,
                is_active=True,
                in_stock=True,
                **product_data
            )
            db.add(product)

        await db.commit()
        print(f"‚úÖ Created {len(products_data)} test products in category '{category.name}'")


if __name__ == "__main__":
    print("üå± Seeding database with test data...")
    asyncio.run(seed_database())
    print("‚úÖ Database seeding completed!")