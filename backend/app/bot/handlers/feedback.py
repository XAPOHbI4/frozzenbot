"""Feedback handlers for Telegram bot."""

import logging
from typing import Optional
from aiogram import types
from aiogram.dispatcher import FSMContext

from app.database import async_session_maker
from app.models.user import User
from app.models.order import Order
from app.models.notification import FeedbackRating
from app.services.notification import NotificationService
from app.bot.bot import dp, bot
from sqlalchemy import select

logger = logging.getLogger(__name__)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('rate_order_'))
async def handle_order_rating(callback_query: types.CallbackQuery):
    """Handle order rating callback."""
    try:
        # Parse callback data: rate_order_{order_id}_{rating}
        parts = callback_query.data.split('_')
        if len(parts) != 4:
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        order_id = int(parts[2])
        rating = int(parts[3])

        if not (1 <= rating <= 5):
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
            return

        user_telegram_id = callback_query.from_user.id

        async with async_session_maker() as db:
            # Get user
            user_result = await db.execute(
                select(User).where(User.telegram_id == user_telegram_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Get order and verify it belongs to user
            order_result = await db.execute(
                select(Order).where(Order.id == order_id)
            )
            order = order_result.scalar_one_or_none()

            if not order:
                await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if order.user_id != user.id:
                await callback_query.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
                return

            # Check if feedback already exists
            existing_feedback = await db.execute(
                select(FeedbackRating).where(FeedbackRating.order_id == order_id)
            )
            if existing_feedback.scalar_one_or_none():
                await callback_query.answer("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑")
                return

            # Save feedback
            notification_service = NotificationService(db)
            feedback = await notification_service.save_feedback_rating(
                order_id=order_id,
                user_id=user.id,
                rating=rating
            )

            if feedback:
                # Update message to show rating was saved
                rating_emoji = feedback.rating_emoji
                new_text = f"""
‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É –∑–∞–∫–∞–∑–∞ #{order_id}!</b>

–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating_emoji}

–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
                """.strip()

                # Create inline keyboard for additional feedback
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                        callback_data=f"feedback_comment_{order_id}"
                    )
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –ì–æ—Ç–æ–≤–æ",
                        callback_data=f"feedback_done_{order_id}"
                    )
                )

                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=new_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )

                await callback_query.answer(f"–û—Ü–µ–Ω–∫–∞ {rating_emoji} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

            else:
                await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏")

    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        logger.error(f"Invalid callback data format: {callback_query.data}")
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.error(f"Error handling order rating: {e}")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('feedback_comment_'))
async def handle_feedback_comment_request(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle request for additional feedback comment."""
    try:
        # Parse callback data: feedback_comment_{order_id}
        parts = callback_query.data.split('_')
        if len(parts) != 3:
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        order_id = int(parts[2])

        # Store order_id in state for next message
        await state.update_data(pending_feedback_order_id=order_id)

        await callback_query.message.reply(
            "üí¨ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∑–∞–∫–∞–∑–µ:</b>\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. "
            "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
            parse_mode="HTML"
        )

        await callback_query.answer("–û–∂–∏–¥–∞–µ–º –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        logger.error(f"Invalid callback data format: {callback_query.data}")
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.error(f"Error handling feedback comment request: {e}")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('feedback_done_'))
async def handle_feedback_done(callback_query: types.CallbackQuery):
    """Handle feedback completion."""
    try:
        # Parse callback data: feedback_done_{order_id}
        parts = callback_query.data.split('_')
        if len(parts) != 3:
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        order_id = int(parts[2])

        # Update message to show completion
        new_text = f"""
üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ #{order_id}!</b>

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥.

–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! üòä
        """.strip()

        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=new_text,
            parse_mode="HTML"
        )

        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        logger.error(f"Invalid callback data format: {callback_query.data}")
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.error(f"Error handling feedback done: {e}")


@dp.message_handler(state='*', content_types=types.ContentTypes.TEXT)
async def handle_feedback_text(message: types.Message, state: FSMContext):
    """Handle text messages that might be feedback comments."""
    try:
        # Check if user has pending feedback
        data = await state.get_data()
        pending_order_id = data.get('pending_feedback_order_id')

        if not pending_order_id:
            # This is not a feedback message, let other handlers process it
            return

        # Clear pending feedback from state
        await state.update_data(pending_feedback_order_id=None)

        user_telegram_id = message.from_user.id
        feedback_text = message.text

        if not feedback_text or len(feedback_text.strip()) == 0:
            await message.reply("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        if len(feedback_text) > 1000:
            await message.reply("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        async with async_session_maker() as db:
            # Get user
            user_result = await db.execute(
                select(User).where(User.telegram_id == user_telegram_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Get existing feedback
            feedback_result = await db.execute(
                select(FeedbackRating).where(
                    FeedbackRating.order_id == pending_order_id,
                    FeedbackRating.user_id == user.id
                )
            )
            feedback = feedback_result.scalar_one_or_none()

            if not feedback:
                await message.reply("–û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞–∫–∞–∑—É.")
                return

            # Update feedback with text
            feedback.feedback_text = feedback_text.strip()
            await db.commit()

            # Send confirmation
            await message.reply(
                f"‚úÖ <b>–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üìù <i>{feedback_text}</i>\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ #{pending_order_id}!",
                parse_mode="HTML"
            )

            # Notify admin about new detailed feedback
            from app.config import settings
            admin_message = f"""
üí¨ <b>–ù–æ–≤—ã–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤</b>

üì¶ <b>–ó–∞–∫–∞–∑:</b> #{pending_order_id}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name}
‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {feedback.rating_emoji}

üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
<i>{feedback_text}</i>
            """.strip()

            notification_service = NotificationService(db)
            await notification_service.send_admin_notification(admin_message)

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        logger.error(f"Error handling feedback text: {e}")


# Additional handlers for feedback management

@dp.message_handler(commands=['my_feedback'])
async def show_user_feedback(message: types.Message):
    """Show user's feedback history."""
    try:
        user_telegram_id = message.from_user.id

        async with async_session_maker() as db:
            # Get user
            user_result = await db.execute(
                select(User).where(User.telegram_id == user_telegram_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Get user's feedback with order details
            feedback_result = await db.execute(
                select(FeedbackRating, Order)
                .join(Order, FeedbackRating.order_id == Order.id)
                .where(FeedbackRating.user_id == user.id)
                .order_by(FeedbackRating.created_at.desc())
            )
            feedback_list = feedback_result.all()

            if not feedback_list:
                await message.reply(
                    "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.\n\n"
                    "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –≤–∞—Å –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å!"
                )
                return

            text = "üìù <b>–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:</b>\n\n"

            for feedback, order in feedback_list:
                text += f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                text += f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {feedback.rating_emoji}\n"
                text += f"üìÖ <b>–î–∞—Ç–∞:</b> {feedback.created_at.strftime('%d.%m.%Y')}\n"

                if feedback.feedback_text:
                    text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{feedback.feedback_text}</i>\n"

                text += "\n"

            await message.reply(text, parse_mode="HTML")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤")
        logger.error(f"Error showing user feedback: {e}")


@dp.message_handler(commands=['feedback_stats'], user_id=lambda message: message.from_user.id == int(settings.admin_id))
async def show_feedback_stats(message: types.Message):
    """Show feedback statistics (admin only)."""
    try:
        async with async_session_maker() as db:
            from datetime import datetime, timedelta
            from sqlalchemy import func

            # Get stats for last 30 days
            start_date = datetime.utcnow() - timedelta(days=30)

            # Total feedback count
            total_result = await db.execute(
                select(func.count(FeedbackRating.id))
                .where(FeedbackRating.created_at >= start_date)
            )
            total_feedback = total_result.scalar() or 0

            # Average rating
            avg_result = await db.execute(
                select(func.avg(FeedbackRating.rating))
                .where(FeedbackRating.created_at >= start_date)
            )
            avg_rating = avg_result.scalar() or 0

            # Rating distribution
            rating_dist_result = await db.execute(
                select(
                    FeedbackRating.rating,
                    func.count(FeedbackRating.id).label('count')
                )
                .where(FeedbackRating.created_at >= start_date)
                .group_by(FeedbackRating.rating)
            )

            rating_distribution = {}
            for row in rating_dist_result:
                rating_distribution[row.rating] = row.count

            # Build message
            text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ 30 –¥–Ω–µ–π</b>

üìù <b>–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:</b> {total_feedback}
‚≠ê <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> {avg_rating:.1f}

üìà <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>
            """.strip()

            for rating in range(5, 0, -1):
                count = rating_distribution.get(rating, 0)
                percentage = (count / total_feedback * 100) if total_feedback > 0 else 0
                stars = "‚≠ê" * rating
                text += f"\n{stars} {count} ({percentage:.1f}%)"

            await message.reply(text, parse_mode="HTML")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        logger.error(f"Error showing feedback stats: {e}")


# Helper function for external use
async def send_feedback_request(order_id: int, user_telegram_id: int):
    """Send feedback request for an order."""
    try:
        feedback_message = f"""
‚≠ê <b>–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ #{order_id}</b>

–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∑–∞–∫–∞–∑? –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:
        """.strip()

        # Create inline keyboard for ratings
        keyboard = types.InlineKeyboardMarkup()
        rating_buttons = []
        for rating in range(1, 6):
            stars = "‚≠ê" * rating
            rating_buttons.append(
                types.InlineKeyboardButton(
                    text=stars,
                    callback_data=f"rate_order_{order_id}_{rating}"
                )
            )

        keyboard.row(*rating_buttons)

        await bot.send_message(
            chat_id=user_telegram_id,
            text=feedback_message,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        logger.info(f"Feedback request sent for order {order_id} to user {user_telegram_id}")

    except Exception as e:
        logger.error(f"Error sending feedback request for order {order_id}: {e}")