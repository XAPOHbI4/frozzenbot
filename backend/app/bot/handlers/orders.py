"""Order management handlers for Telegram bot."""

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from app.database import get_async_session
from app.models.order import Order, OrderStatus
from app.models.user import User
from app.services.order import OrderService
from app.services.notification import NotificationService

router = Router()


@router.callback_query(F.data.startswith("cancel_order:"))
async def handle_cancel_order(callback: types.CallbackQuery):
    """Handle order cancellation from notification message."""
    try:
        # Extract order ID from callback data
        order_id = int(callback.data.split(":")[1])
        user_telegram_id = callback.from_user.id

        # Get database session
        async for session in get_async_session():
            order_service = OrderService(session)

            # Get order and validate ownership
            order = await order_service.get_order_by_id(order_id)
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # Get user to validate ownership
            from sqlalchemy import select
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_telegram_id)
            )
            user = user_result.scalar_one_or_none()

            if not user or order.user_id != user.id:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑", show_alert=True)
                return

            # Check if order can be cancelled
            if not order.can_be_cancelled:
                await callback.answer(
                    f"‚ùå –ó–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ '{order.status_display}' –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å",
                    show_alert=True
                )
                return

            # Cancel the order
            success = await order_service.cancel_order(
                order_id=order_id,
                reason="–û—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç",
                cancelled_by_user_id=user.id
            )

            if success:
                # Update the message to show cancellation
                cancel_text = f"""
‚ùå <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω</b>

–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.
–ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üôè
                """

                # Remove the cancel button
                await callback.message.edit_text(
                    cancel_text,
                    reply_markup=None
                )

                await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)

                # Send admin notification about cancellation
                admin_text = f"""
üö´ <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>

üì¶ <b>–ó–∞–∫–∞–∑:</b> #{order_id}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.customer_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.customer_phone}
üí∞ <b>–°—É–º–º–∞:</b> {order.formatted_total}
‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã:</b> {order.updated_at.strftime('%d.%m.%Y %H:%M')}

üîç <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –û—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç
                """

                await NotificationService.send_admin_notification(admin_text)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", show_alert=True)

            break

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        print(f"Error cancelling order: {e}")


async def send_order_notification(
    telegram_id: int,
    order: Order,
    message_type: str = "created"
):
    """Send order notification to user with cancel button if applicable."""

    # Format order details
    if message_type == "created":
        notification_text = f"""
‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!</b>

–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É <b>{order.formatted_total}</b>:
"""
        # Add order items
        if order.items:
            for item in order.items:
                notification_text += f"‚Ä¢ {item.product.name} - {item.quantity} —à—Ç.\n"

        notification_text += f"""

<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {order.formatted_total}

–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:
<code>5536 9141 2359 8116</code> (—Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º)

‚Ä¢ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É:</b> {order.id}

‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã—Ö.
–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã ‚è≥

<b>–û—Ç–º–µ–Ω–∏—Ç—å</b>
        """

        # Add cancel button if order can be cancelled
        if order.can_be_cancelled:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                            callback_data=f"cancel_order:{order.id}"
                        )
                    ]
                ]
            )
        else:
            keyboard = None

    elif message_type == "payment_success":
        notification_text = f"""
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

–ó–∞–∫–∞–∑ #{order.id} –æ–ø–ª–∞—á–µ–Ω –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> 10-15 –º–∏–Ω

–ó–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.
–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
        """
        keyboard = None

    elif message_type == "completed":
        notification_text = f"""
üéâ <b>–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>

–ó–∞–∫–∞–∑ #{order.id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.

–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:
        """

        # Add feedback buttons
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚≠ê", callback_data=f"feedback:{order.id}:1"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"feedback:{order.id}:2"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"feedback:{order.id}:3"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"feedback:{order.id}:4"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"feedback:{order.id}:5"),
                ]
            ]
        )

    # Send notification
    try:
        await NotificationService.send_notification(
            telegram_id,
            notification_text,
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"Failed to send order notification: {e}")


@router.callback_query(F.data == "my_orders")
async def handle_my_orders(callback: types.CallbackQuery):
    """Show user's recent orders."""
    user_telegram_id = callback.from_user.id

    async for session in get_async_session():
        # Get user
        from sqlalchemy import select
        user_result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        user = user_result.scalar_one_or_none()

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # Get recent orders
        order_service = OrderService(session)
        orders = await order_service.get_user_orders(user.id, limit=5)

        if not orders:
            orders_text = """
üìã <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥" –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞! üõí
            """
        else:
            orders_text = "üìã <b>–ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b>\n\n"

            for order in orders:
                status_emoji = {
                    OrderStatus.PENDING: "‚è≥",
                    OrderStatus.CONFIRMED: "‚úÖ",
                    OrderStatus.PREPARING: "üë®‚Äçüç≥",
                    OrderStatus.READY: "üéØ",
                    OrderStatus.COMPLETED: "üéâ",
                    OrderStatus.CANCELLED: "‚ùå"
                }.get(order.status, "‚ùì")

                orders_text += f"""
<b>–ó–∞–∫–∞–∑ #{order.id}</b> {status_emoji}
üí∞ –°—É–º–º–∞: {order.formatted_total}
üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}
üìä –°—Ç–∞—Ç—É—Å: {order.status_display}

"""

        await callback.message.edit_text(orders_text)
        await callback.answer()
        break