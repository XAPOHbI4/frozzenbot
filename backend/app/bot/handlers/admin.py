"""Admin bot handlers."""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.config import settings
from app.services.product import ProductService
from app.services.order import OrderService

router = Router()

# Filter for admin users only
admin_filter = F.from_user.id == settings.admin_id


@router.message(Command("admin"), admin_filter)
async def cmd_admin(message: types.Message):
    """Handle /admin command - admin panel."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="admin_products"),
                InlineKeyboardButton(text="üìã –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ]
        ]
    )

    admin_text = f"""
<b>üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """

    await message.answer(admin_text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "admin_products", admin_filter)
async def callback_admin_products(callback_query: types.CallbackQuery):
    """Handle admin products callback."""
    product_service = ProductService()
    products_count = await product_service.get_products_count()

    text = f"""
<b>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>

–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏

<i>–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>
    """

    await callback_query.message.edit_text(text)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "admin_orders", admin_filter)
async def callback_admin_orders(callback_query: types.CallbackQuery):
    """Handle admin orders callback."""
    order_service = OrderService()
    stats = await order_service.get_orders_stats()

    text = f"""
<b>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>

–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats.get('total', 0)}
–ù–æ–≤—ã–µ: {stats.get('pending', 0)}
–í —Ä–∞–±–æ—Ç–µ: {stats.get('processing', 0)}
–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {stats.get('completed', 0)}

<i>–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>
    """

    await callback_query.message.edit_text(text)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "admin_stats", admin_filter)
async def callback_admin_stats(callback_query: types.CallbackQuery):
    """Handle admin statistics callback."""
    text = """
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è

<i>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏</i>
    """

    await callback_query.message.edit_text(text)
    await callback_query.answer()


@router.message(Command("stats"), admin_filter)
async def cmd_stats(message: types.Message):
    """Handle /stats command - quick stats."""
    product_service = ProductService()
    order_service = OrderService()

    products_count = await product_service.get_products_count()
    orders_stats = await order_service.get_orders_stats()

    stats_text = f"""
<b>üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–¢–æ–≤–∞—Ä—ã:</b> {products_count}
<b>–ó–∞–∫–∞–∑—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {orders_stats.get('total', 0)}
‚Ä¢ –ù–æ–≤—ã–µ: {orders_stats.get('pending', 0)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {orders_stats.get('completed', 0)}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å–µ–π—á–∞—Å</i>
    """

    await message.answer(stats_text)