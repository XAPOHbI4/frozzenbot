openapi: 3.0.3
info:
  title: FrozenBot API
  description: |
    API for FrozenBot - Telegram bot for frozen food delivery system.

    This API serves three main clients:
    - **Telegram Bot**: For user interactions and order processing
    - **Admin Panel**: React-based admin interface for managing orders, products, and analytics
    - **WebApp**: Telegram WebApp for customer ordering interface

    ## Authentication

    The API uses multiple authentication methods:
    - **JWT Tokens**: For admin panel authentication
    - **Telegram WebApp Validation**: For WebApp users using initData
    - **Bot Token**: For internal bot operations

    ## Rate Limiting

    API endpoints are rate limited to prevent abuse:
    - Admin endpoints: 100 requests per minute
    - User endpoints: 60 requests per minute
    - Public endpoints: 30 requests per minute

  version: 1.0.0
  contact:
    name: FrozenBot API Support
    email: support@frozenbot.com
  license:
    name: MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.frozenbot.com
    description: Production server

tags:
  - name: auth
    description: Authentication endpoints
  - name: users
    description: User management
  - name: products
    description: Product catalog
  - name: categories
    description: Product categories
  - name: cart
    description: Shopping cart operations
  - name: orders
    description: Order management
  - name: admin
    description: Admin operations
  - name: payments
    description: Payment processing
  - name: notifications
    description: Notification system

paths:
  # Authentication
  /auth/login:
    post:
      tags: [auth]
      summary: Admin login
      description: Authenticate admin user and return JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/refresh:
    post:
      tags: [auth]
      summary: Refresh JWT token
      description: Get new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Users
  /api/users/me:
    get:
      tags: [users]
      summary: Get current user
      description: Get current authenticated user information
      security:
        - JWTAuth: []
        - TelegramWebApp: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/users/:
    post:
      tags: [users]
      summary: Register Telegram user
      description: Register or update Telegram user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/users/{telegram_id}:
    get:
      tags: [users]
      summary: Get user by Telegram ID
      description: Get user information by Telegram ID
      parameters:
        - name: telegram_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Telegram user ID
      security:
        - JWTAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Products
  /api/products/:
    get:
      tags: [products]
      summary: List products
      description: Get paginated list of products with optional filtering
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - name: category_id
          in: query
          schema:
            type: integer
          description: Filter by category ID
        - name: search
          in: query
          schema:
            type: string
          description: Search in product name and description
        - name: in_stock
          in: query
          schema:
            type: boolean
          description: Filter by stock availability
        - name: is_active
          in: query
          schema:
            type: boolean
            default: true
          description: Filter by active status
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

    post:
      tags: [products]
      summary: Create product
      description: Create a new product (admin only)
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/products/{id}:
    get:
      tags: [products]
      summary: Get product by ID
      description: Get detailed product information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [products]
      summary: Update product
      description: Update product information (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags: [products]
      summary: Delete product
      description: Delete product (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      security:
        - JWTAuth: []
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Categories
  /api/categories/:
    get:
      tags: [categories]
      summary: List categories
      description: Get all product categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      tags: [categories]
      summary: Create category
      description: Create a new category (admin only)
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/categories/{id}:
    put:
      tags: [categories]
      summary: Update category
      description: Update category information (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags: [categories]
      summary: Delete category
      description: Delete category (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
      security:
        - JWTAuth: []
      responses:
        '204':
          description: Category deleted successfully
        '400':
          description: Cannot delete category with products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Cart
  /api/cart/{telegram_id}:
    get:
      tags: [cart]
      summary: Get user cart
      description: Get current cart for user by Telegram ID
      parameters:
        - name: telegram_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Telegram user ID
      security:
        - TelegramWebApp: []
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart not found (empty cart)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyCart'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/cart/items:
    post:
      tags: [cart]
      summary: Add item to cart
      description: Add product to user's cart
      security:
        - TelegramWebApp: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/cart/items/{id}:
    put:
      tags: [cart]
      summary: Update cart item
      description: Update quantity of cart item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart item ID
      security:
        - TelegramWebApp: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemUpdateRequest'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags: [cart]
      summary: Remove cart item
      description: Remove item from cart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart item ID
      security:
        - TelegramWebApp: []
      responses:
        '204':
          description: Cart item removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Orders
  /api/orders/:
    get:
      tags: [orders]
      summary: List orders
      description: Get orders (filtered by user for regular users, all orders for admin)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/OrderStatus'
          description: Filter by order status
        - name: telegram_id
          in: query
          schema:
            type: integer
            format: int64
          description: Filter by Telegram user ID (admin only)
        - name: date_from
          in: query
          schema:
            type: string
            format: date
          description: Filter orders from date (admin only)
        - name: date_to
          in: query
          schema:
            type: string
            format: date
          description: Filter orders to date (admin only)
      security:
        - JWTAuth: []
        - TelegramWebApp: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

    post:
      tags: [orders]
      summary: Create order
      description: Create new order from cart
      security:
        - TelegramWebApp: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/orders/{id}:
    get:
      tags: [orders]
      summary: Get order by ID
      description: Get detailed order information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      security:
        - JWTAuth: []
        - TelegramWebApp: []
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/orders/{id}/status:
    put:
      tags: [orders]
      summary: Update order status
      description: Update order status (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdateRequest'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Admin Dashboard
  /api/admin/dashboard/stats:
    get:
      tags: [admin]
      summary: Get dashboard statistics
      description: Get key metrics for admin dashboard
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/admin/orders/stats:
    get:
      tags: [admin]
      summary: Get order analytics
      description: Get detailed order analytics and metrics
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
          description: Analytics period
        - name: date_from
          in: query
          schema:
            type: string
            format: date
          description: Start date for analytics
        - name: date_to
          in: query
          schema:
            type: string
            format: date
          description: End date for analytics
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Order analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderAnalytics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/admin/products/stats:
    get:
      tags: [admin]
      summary: Get product analytics
      description: Get product performance and inventory analytics
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
          description: Analytics period
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Product analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAnalytics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Notifications
  /api/notifications/send:
    post:
      tags: [notifications]
      summary: Send notification
      description: Send notification to user or broadcast (admin only)
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Payments
  /api/payments/webhook:
    post:
      tags: [payments]
      summary: Payment webhook
      description: Handle payment provider webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhookRequest'
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/payments/{order_id}/status:
    get:
      tags: [payments]
      summary: Get payment status
      description: Get payment status for order
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      security:
        - JWTAuth: []
        - TelegramWebApp: []
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for admin authentication

    TelegramWebApp:
      type: apiKey
      in: header
      name: X-Telegram-Init-Data
      description: Telegram WebApp initData for user authentication

  schemas:
    # Error responses
    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
          additionalProperties: true

    ValidationError:
      type: object
      required:
        - error
        - message
        - details
      properties:
        error:
          type: string
          example: "validation_error"
        message:
          type: string
          example: "Validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string

    # Authentication
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          format: password
          example: "password123"

    LoginResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
        - user
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 1800
        user:
          $ref: '#/components/schemas/User'

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token

    TokenResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: New JWT access token
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 1800

    # User
    User:
      type: object
      required:
        - id
        - telegram_id
        - first_name
        - is_admin
        - is_active
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 1
        telegram_id:
          type: integer
          format: int64
          example: 123456789
        username:
          type: string
          nullable: true
          example: "johndoe"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          nullable: true
          example: "Doe"
        phone:
          type: string
          nullable: true
          example: "+1234567890"
        is_admin:
          type: boolean
          example: false
        is_active:
          type: boolean
          example: true
        full_name:
          type: string
          readOnly: true
          example: "John Doe"
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    UserCreateRequest:
      type: object
      required:
        - telegram_id
        - first_name
      properties:
        telegram_id:
          type: integer
          format: int64
          example: 123456789
        username:
          type: string
          nullable: true
          example: "johndoe"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          nullable: true
          example: "Doe"
        phone:
          type: string
          nullable: true
          example: "+1234567890"

    # Category
    Category:
      type: object
      required:
        - id
        - name
        - is_active
        - sort_order
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Замороженные овощи"
        description:
          type: string
          nullable: true
          example: "Свежие замороженные овощи"
        image_url:
          type: string
          nullable: true
          example: "https://example.com/category.jpg"
        is_active:
          type: boolean
          example: true
        sort_order:
          type: integer
          example: 0
        products_count:
          type: integer
          readOnly: true
          example: 15
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    CategoryCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Замороженные овощи"
        description:
          type: string
          nullable: true
          example: "Свежие замороженные овощи"
        image_url:
          type: string
          nullable: true
          example: "https://example.com/category.jpg"
        is_active:
          type: boolean
          default: true
        sort_order:
          type: integer
          default: 0

    CategoryUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "Замороженные овощи"
        description:
          type: string
          nullable: true
          example: "Свежие замороженные овощи"
        image_url:
          type: string
          nullable: true
          example: "https://example.com/category.jpg"
        is_active:
          type: boolean
        sort_order:
          type: integer

    # Product
    Product:
      type: object
      required:
        - id
        - name
        - price
        - is_active
        - in_stock
        - sort_order
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Брокколи замороженная"
        description:
          type: string
          nullable: true
          example: "Свежая замороженная брокколи"
        price:
          type: number
          format: float
          example: 150.0
        formatted_price:
          type: string
          readOnly: true
          example: "150₽"
        image_url:
          type: string
          nullable: true
          example: "https://example.com/broccoli.jpg"
        is_active:
          type: boolean
          example: true
        in_stock:
          type: boolean
          example: true
        weight:
          type: integer
          nullable: true
          description: "Weight in grams"
          example: 500
        formatted_weight:
          type: string
          readOnly: true
          example: "500г"
        sort_order:
          type: integer
          example: 0
        category_id:
          type: integer
          nullable: true
          example: 1
        category:
          $ref: '#/components/schemas/Category'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    ProductCreateRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          example: "Брокколи замороженная"
        description:
          type: string
          nullable: true
          example: "Свежая замороженная брокколи"
        price:
          type: number
          format: float
          minimum: 0
          example: 150.0
        image_url:
          type: string
          nullable: true
          example: "https://example.com/broccoli.jpg"
        is_active:
          type: boolean
          default: true
        in_stock:
          type: boolean
          default: true
        weight:
          type: integer
          nullable: true
          minimum: 0
          description: "Weight in grams"
          example: 500
        sort_order:
          type: integer
          default: 0
        category_id:
          type: integer
          nullable: true
          example: 1

    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "Брокколи замороженная"
        description:
          type: string
          nullable: true
          example: "Свежая замороженная брокколи"
        price:
          type: number
          format: float
          minimum: 0
          example: 150.0
        image_url:
          type: string
          nullable: true
          example: "https://example.com/broccoli.jpg"
        is_active:
          type: boolean
        in_stock:
          type: boolean
        weight:
          type: integer
          nullable: true
          minimum: 0
          description: "Weight in grams"
          example: 500
        sort_order:
          type: integer
        category_id:
          type: integer
          nullable: true
          example: 1

    ProductListResponse:
      type: object
      required:
        - items
        - total
        - page
        - pages
        - per_page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total:
          type: integer
          description: Total number of products
          example: 150
        page:
          type: integer
          description: Current page number
          example: 1
        pages:
          type: integer
          description: Total number of pages
          example: 8
        per_page:
          type: integer
          description: Items per page
          example: 20

    # Cart
    Cart:
      type: object
      required:
        - id
        - user_id
        - items
        - total_amount
        - total_items
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total_amount:
          type: number
          format: float
          readOnly: true
          example: 450.0
        total_items:
          type: integer
          readOnly: true
          example: 3
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    EmptyCart:
      type: object
      required:
        - items
        - total_amount
        - total_items
      properties:
        items:
          type: array
          items: {}
          example: []
        total_amount:
          type: number
          format: float
          example: 0.0
        total_items:
          type: integer
          example: 0

    CartItem:
      type: object
      required:
        - id
        - cart_id
        - product_id
        - quantity
        - product
        - total_price
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 1
        cart_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          minimum: 1
          example: 2
        product:
          $ref: '#/components/schemas/Product'
        total_price:
          type: number
          format: float
          readOnly: true
          example: 300.0
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    CartItemCreateRequest:
      type: object
      required:
        - telegram_id
        - product_id
        - quantity
      properties:
        telegram_id:
          type: integer
          format: int64
          example: 123456789
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          minimum: 1
          example: 2

    CartItemUpdateRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 1
          example: 3

    # Order
    OrderStatus:
      type: string
      enum:
        - pending
        - confirmed
        - preparing
        - ready
        - completed
        - cancelled
      example: "pending"

    Order:
      type: object
      required:
        - id
        - user_id
        - status
        - total_amount
        - customer_name
        - customer_phone
        - payment_method
        - items
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        status:
          $ref: '#/components/schemas/OrderStatus'
        status_display:
          type: string
          readOnly: true
          example: "Ожидает подтверждения"
        total_amount:
          type: number
          format: float
          example: 450.0
        formatted_total:
          type: string
          readOnly: true
          example: "450₽"
        customer_name:
          type: string
          example: "Иван Иванов"
        customer_phone:
          type: string
          example: "+7900123456"
        delivery_address:
          type: string
          nullable: true
          example: "ул. Пушкина, д. 1, кв. 1"
        notes:
          type: string
          nullable: true
          example: "Позвонить за 10 минут"
        payment_method:
          type: string
          example: "card"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        user:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    OrderItem:
      type: object
      required:
        - id
        - order_id
        - product_id
        - quantity
        - price
        - product
        - total_price
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          description: "Price at the time of order"
          example: 150.0
        formatted_price:
          type: string
          readOnly: true
          example: "150₽"
        total_price:
          type: number
          format: float
          readOnly: true
          example: 300.0
        formatted_total:
          type: string
          readOnly: true
          example: "300₽"
        product:
          $ref: '#/components/schemas/Product'

    OrderCreateRequest:
      type: object
      required:
        - telegram_id
        - customer_name
        - customer_phone
      properties:
        telegram_id:
          type: integer
          format: int64
          example: 123456789
        customer_name:
          type: string
          example: "Иван Иванов"
        customer_phone:
          type: string
          example: "+7900123456"
        delivery_address:
          type: string
          nullable: true
          example: "ул. Пушкина, д. 1, кв. 1"
        notes:
          type: string
          nullable: true
          example: "Позвонить за 10 минут"
        payment_method:
          type: string
          default: "card"
          example: "card"

    OrderStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'

    OrderListResponse:
      type: object
      required:
        - items
        - total
        - page
        - pages
        - per_page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        total:
          type: integer
          description: Total number of orders
          example: 50
        page:
          type: integer
          description: Current page number
          example: 1
        pages:
          type: integer
          description: Total number of pages
          example: 3
        per_page:
          type: integer
          description: Items per page
          example: 20

    # Admin Analytics
    DashboardStats:
      type: object
      required:
        - total_orders
        - total_revenue
        - active_users
        - pending_orders
        - today_orders
        - today_revenue
        - popular_products
        - recent_orders
      properties:
        total_orders:
          type: integer
          example: 1250
        total_revenue:
          type: number
          format: float
          example: 125000.0
        active_users:
          type: integer
          example: 450
        pending_orders:
          type: integer
          example: 5
        today_orders:
          type: integer
          example: 15
        today_revenue:
          type: number
          format: float
          example: 1500.0
        popular_products:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: '#/components/schemas/Product'
              orders_count:
                type: integer
              total_revenue:
                type: number
                format: float
        recent_orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    OrderAnalytics:
      type: object
      required:
        - period
        - total_orders
        - total_revenue
        - average_order_value
        - orders_by_status
        - revenue_chart
        - orders_chart
      properties:
        period:
          type: string
          example: "month"
        total_orders:
          type: integer
          example: 150
        total_revenue:
          type: number
          format: float
          example: 15000.0
        average_order_value:
          type: number
          format: float
          example: 100.0
        orders_by_status:
          type: object
          additionalProperties:
            type: integer
          example:
            pending: 5
            confirmed: 10
            completed: 135
        revenue_chart:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              revenue:
                type: number
                format: float
        orders_chart:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer

    ProductAnalytics:
      type: object
      required:
        - period
        - top_products
        - categories_performance
        - inventory_status
      properties:
        period:
          type: string
          example: "month"
        top_products:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: '#/components/schemas/Product'
              orders_count:
                type: integer
              revenue:
                type: number
                format: float
        categories_performance:
          type: array
          items:
            type: object
            properties:
              category:
                $ref: '#/components/schemas/Category'
              orders_count:
                type: integer
              revenue:
                type: number
                format: float
        inventory_status:
          type: object
          properties:
            total_products:
              type: integer
            active_products:
              type: integer
            out_of_stock:
              type: integer

    # Notifications
    NotificationRequest:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          enum:
            - user
            - broadcast
          example: "user"
        telegram_id:
          type: integer
          format: int64
          description: "Required for type=user"
          example: 123456789
        message:
          type: string
          example: "Ваш заказ готов к выдаче!"
        parse_mode:
          type: string
          enum:
            - HTML
            - Markdown
          example: "HTML"

    NotificationResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Notification sent successfully"
        sent_count:
          type: integer
          description: "Number of notifications sent (for broadcast)"
          example: 150

    # Payments
    PaymentWebhookRequest:
      type: object
      required:
        - order_id
        - status
        - amount
      properties:
        order_id:
          type: integer
          example: 1
        status:
          type: string
          enum:
            - success
            - failed
            - pending
          example: "success"
        amount:
          type: number
          format: float
          example: 450.0
        transaction_id:
          type: string
          example: "txn_123456789"
        payment_method:
          type: string
          example: "card"
        metadata:
          type: object
          additionalProperties: true

    PaymentStatus:
      type: object
      required:
        - order_id
        - status
        - amount
      properties:
        order_id:
          type: integer
          example: 1
        status:
          type: string
          enum:
            - pending
            - success
            - failed
            - refunded
          example: "success"
        amount:
          type: number
          format: float
          example: 450.0
        transaction_id:
          type: string
          nullable: true
          example: "txn_123456789"
        payment_method:
          type: string
          example: "card"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "bad_request"
            message: "Invalid request parameters"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "unauthorized"
            message: "Authentication required"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "forbidden"
            message: "Access denied"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "not_found"
            message: "Resource not found"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            error: "validation_error"
            message: "Validation failed"
            details:
              - field: "price"
                message: "Price must be greater than 0"
                code: "value_error.number.not_gt"